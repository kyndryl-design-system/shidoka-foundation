{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./common/defs/breakpoints"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./common/helpers/breakpoints"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./common/helpers/events"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./common/helpers/color"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./common/helpers/storybook"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/common/defs/breakpoints.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "BREAKPOINTS",
          "type": {
            "text": "object"
          },
          "default": "{\n  SM: 'sm',\n  MD: 'md',\n  LG: 'lg',\n  XL: 'xl',\n  MAX: 'max',\n}",
          "description": "Breakpoint values defined in variable: --kd-current-breakpoint\nUsed for conditional logic and/or rendering in component JS\nby matching the current breakpoint to one of these values."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BREAKPOINTS",
          "declaration": {
            "name": "BREAKPOINTS",
            "module": "src/common/defs/breakpoints.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/common/helpers/breakpoints.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getCurrentBreakpoint",
          "description": "Get the current breakpoint from CSS variable.\nUsed for conditional logic and/or rendering in component JS\nby matching the current breakpoint with values defined in common/defs/breakpoints."
        },
        {
          "kind": "variable",
          "name": "BREAKPOINT_VIEWPORTS",
          "type": {
            "text": "object"
          },
          "default": "{\n  sm: {\n    name: 'Breakpoint: Small',\n    styles: {\n      width: '320px',\n      height: '100%',\n    },\n  },\n  md: {\n    name: 'Breakpoint: Medium',\n    styles: {\n      width: '672px',\n      height: '100%',\n    },\n  },\n  lg: {\n    name: 'Breakpoint: Large',\n    styles: {\n      width: '1184px',\n      height: '100%',\n    },\n  },\n  xl: {\n    name: 'Breakpoint: X-Large',\n    styles: {\n      width: '1312px',\n      height: '100%',\n    },\n  },\n  max: {\n    name: 'Breakpoint: Max',\n    styles: {\n      width: '1584px',\n      height: '100%',\n    },\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getCurrentBreakpoint",
          "declaration": {
            "name": "getCurrentBreakpoint",
            "module": "src/common/helpers/breakpoints.ts"
          }
        },
        {
          "kind": "js",
          "name": "BREAKPOINT_VIEWPORTS",
          "declaration": {
            "name": "BREAKPOINT_VIEWPORTS",
            "module": "src/common/helpers/breakpoints.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/common/helpers/color.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getColorScheme",
          "description": "The function `getColorScheme` retrieves the content of the meta tag with the name \"color-scheme\"\nfrom the document.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "getPreferredColorScheme",
          "description": "The function `getPreferredColorScheme` determines the preferred color scheme (dark or light) based\non the user's system settings.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "getTokenThemeVal",
          "parameters": [
            {
              "name": "token",
              "type": {
                "text": "string"
              },
              "description": "The `getTokenThemeVal` function takes a `token` parameter, which is a string\nrepresenting a CSS variable name. The function retrieves the computed value of the CSS variable\nspecified by the `token` parameter and returns the appropriate color value based on the color scheme\n(light or dark) and preferred color"
            }
          ],
          "description": "The function `getTokenThemeVal` retrieves the appropriate color value based on the current color\nscheme and preferred color scheme.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getColorScheme",
          "declaration": {
            "name": "getColorScheme",
            "module": "src/common/helpers/color.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPreferredColorScheme",
          "declaration": {
            "name": "getPreferredColorScheme",
            "module": "src/common/helpers/color.ts"
          }
        },
        {
          "kind": "js",
          "name": "getTokenThemeVal",
          "declaration": {
            "name": "getTokenThemeVal",
            "module": "src/common/helpers/color.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/common/helpers/events.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "debounce",
          "parameters": [
            {
              "name": "fn",
              "type": {
                "text": "Function"
              }
            },
            {
              "name": "ms",
              "default": "100"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "src/common/helpers/events.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/common/helpers/storybook.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "stringToReactHtml",
          "parameters": [
            {
              "name": "string",
              "type": {
                "text": "String"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "createOptionsArray",
          "parameters": [
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "*"
              },
              "description": " imported enums object"
            }
          ],
          "description": "Convert an object to an array of only its values.\nUsed when importing enums in component stories for populating argType dropdowns."
        },
        {
          "kind": "function",
          "name": "getTokens",
          "parameters": [
            {
              "name": "json",
              "type": {
                "text": "object"
              }
            },
            {
              "name": "category",
              "default": "''"
            },
            {
              "name": "categoryTree",
              "default": "[]"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "stringToReactHtml",
          "declaration": {
            "name": "stringToReactHtml",
            "module": "src/common/helpers/storybook.ts"
          }
        },
        {
          "kind": "js",
          "name": "createOptionsArray",
          "declaration": {
            "name": "createOptionsArray",
            "module": "src/common/helpers/storybook.ts"
          }
        },
        {
          "kind": "js",
          "name": "getTokens",
          "declaration": {
            "name": "getTokens",
            "module": "src/common/helpers/storybook.ts"
          }
        }
      ]
    }
  ]
}
